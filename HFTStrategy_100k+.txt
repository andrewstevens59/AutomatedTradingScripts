public package jforex;

import java.io.DataOutputStream;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.util.*;
import com.dukascopy.api.IBar;
import com.dukascopy.api.Instrument;
import com.dukascopy.api.JFException;
import com.dukascopy.api.OfferSide;
import com.dukascopy.api.Period;

import com.dukascopy.api.*;

public class HFTStrategy implements IStrategy {
    
    // This defines a particular order
    class OrderSet {
        double price;
        double volume;
        double max_pip_profit = -Double.MAX_VALUE;
        double min_pip_profit = Double.MAX_VALUE;
        boolean is_buy;
        IOrder order;
        OrderSystem system;
        double total_orders;
        boolean is_close = false;
    }
    
    class PricePoint {
        OrderSet order;
        int order_num = 0;
        
        public PricePoint(OrderSet o, int order_num) {
            order = o;
            this.order_num = order_num;
        }
    }
    
    private IEngine engine;
    private IConsole console;
    private IHistory history;
    private IContext context;
    private IIndicators indicators;
    private IUserInterface userInterface;
    private IConsole con = null;
    private static IAccount account;
    
    // This stores the current equity
    private double curr_equity = 0;
    // This store the previous recorded equity time
    private double prev_equity_time = 0;
    
    // This closes outstanding orders
    public static boolean CloseOutstanding(OrderSystem system, double volume) {
        
        if(account.getUseOfLeverage() < 30 || global_orders.size() < 10) {
            return true;
        }
        
        ArrayList<OrderSet> order_buff = new ArrayList<OrderSet>();
        for(OrderSet o : global_orders) {
            order_buff.add(o);
            o.total_orders = o.system.TotalOrders();
        }
        
        // highest to lowest
        Collections.sort(order_buff, new Comparator<OrderSet>() {
             
            public int compare(OrderSet arg1, OrderSet arg2) {
                
                if(arg1.total_orders < arg2.total_orders) {
                    return 1;
                }

                if(arg1.total_orders > arg2.total_orders) {
                    return -1;
                }
                
                if(arg1.order.getAmount() < arg2.order.getAmount()) {
                    return 1;
                }

                if(arg1.order.getAmount() > arg2.order.getAmount()) {
                    return -1;
                }
                
                if(arg1.order.getFillTime() < arg2.order.getFillTime()) {
                    return 1;
                }

                if(arg1.order.getFillTime() > arg2.order.getFillTime()) {
                    return -1;
                }

                return 0; 
            }
        });

        OrderSet o = order_buff.get(order_buff.size()-1);
        if(o.system != order_buff.get(0).system) {
            o.system.CloseOrder(o);
        } else if(volume < o.order.getAmount()) {
            // can't open another order since total order < min
            return false;
        }

        return true; 
    }

    class OrderSystem {
        // This stores the current order id
        private int order_id = 0;
        // This stores the trade direction
        private int trade_dir = 0;
        // This defines the current volume for orders
        private double volume_diff = 1;
        // This stores the series of order placements
        private HashMap<String, PricePoint> order_place_set = new HashMap<String, PricePoint>();
        // This stores the n most recent orders
        private Queue<OrderSet> order_queue = new LinkedList<OrderSet>();
        // This stores the set of orders
        private HashSet<OrderSet> orders = new HashSet<OrderSet>();
        // This stores the number of active orders
        private int active_order_num = 0;
        private int order_set = 0;
        
        // This stores the previous pip value
        private double prev_pip_val = -1;
        // This stores the total profit since trading
        private double total_profit = 0;
        // This stores the previous pip history time
        private double prev_pip_time = -1;
        // This stores the exch rate factor 
        private double exch_rate_fact = 1.0f;
        // THis stores the open trade time
        private double first_trade_time = 0;
        
        public OrderSystem(int order_set, Instrument instrument, int trade_dir) throws JFException {
            this.order_set = order_set;
            this.trade_dir = trade_dir;
        }
        

        // This closes the order 
        public void CloseOrder(OrderSet o) {
            
            if(o.is_close == false) {
                active_order_num--;
                o.is_close = true;
            }
            
            orders.remove(o);
            global_orders.remove(o);
            order_queue.remove(o);
           
               if( o == null) {
                   return;
               }
               
            if ( o.order.getState() == IOrder.State.OPENED ||  o.order.getState() == IOrder.State.FILLED) {
              
                try {
                     o.order.close();
                     total_profit += o.order.getProfitLossInAccountCurrency();
                } catch (JFException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
        
        // This makes an order
        private void PlaceOrder(OrderSet o, double volume, Instrument instrument, ITick tick) throws JFException {

            volume = Math.max(volume, 0.001);
            
            if(o.is_buy == false) {
                o.order = engine.submitOrder("abeq"+String.valueOf(order_id++)+"dr"+String.valueOf(order_set), instrument, IEngine.OrderCommand.SELL, volume);
            } else {
                o.order = engine.submitOrder("abeq"+String.valueOf(order_id++)+"dr"+String.valueOf(order_set), instrument, IEngine.OrderCommand.BUY, volume);
            }
            
            o.system = this;
            global_orders.add(o);
            active_order_num++;
            order_queue.add(o);
            if(order_queue.size() > 40) {
                order_queue.remove();
            }
        }
        
        // This closes all orders
        public void CloseAll() {
            ArrayList<OrderSet> order_buff = new ArrayList<OrderSet>();
            for(OrderSet o : orders) {
                order_buff.add(o);
            }
            
            for(OrderSet o : order_buff) {
                CloseOrder(o);
            }
        }
        
        // This returns the total number of orders
        public double TotalOrders() {
            
            double sum = 0;
            for(OrderSet o : orders) {
                sum += o.order.getAmount();
            }
            
            return sum;
        }
        
        // This finds the exchange rate factor
        private void ExchRateFactor() {
            
            double sum = 0;
            double num = 0;
            for(OrderSet o : order_queue) {
                if(Math.abs(o.order.getProfitLossInPips()) > 0) {
                    sum += Math.abs(o.order.getProfitLossInUSD()) / (Math.abs(o.order.getProfitLossInPips()) * o.order.getAmount());
                    num++;
                }
            }
            
            if(num == 0) { 
                return;
            }
            
            exch_rate_fact = 100 / (sum / num);
        } 
        
        // This closes a particular order type
        private boolean CloseOrderType(int dir, ITick tick, double move_ratio, boolean is_max_loss) {
            
            long buy_time = 0;
            long sell_time = 0;
            double buy_profit = -Double.MAX_VALUE;
            double sell_profit = -Double.MAX_VALUE;
            
            int buy_num = 0;
            int sell_num = 0;
            double net_buy_profit = 0;
            double net_sell_profit = 0;
            double pos_buy_profit = 0;
            double neg_buy_profit = 0;
            double min_buy_profit = 0;
            double max_buy_profit = 0;
            
            double pos_sell_profit = 0;
            double neg_sell_profit = 0;
            double min_sell_profit = 0;
            double buy_usd_profit = 0;
            double sell_usd_profit = 0;
            double max_sell_profit = 0;
            
            ArrayList<OrderSet> order_buff = new ArrayList<OrderSet>();
            for(OrderSet o : orders) {
                order_buff.add(o);
                
                o.max_pip_profit = Math.max(o.max_pip_profit, o.order.getProfitLossInPips());
                o.min_pip_profit = Math.min(o.min_pip_profit, o.order.getProfitLossInPips());
                
                if(o.is_buy == true && o.order.getState() == IOrder.State.FILLED) {
                    buy_profit = Math.max(buy_profit, o.order.getProfitLossInPips());
                    buy_time = Math.max(buy_time, o.order.getFillTime());
                    min_buy_profit = Math.min(min_buy_profit, o.order.getProfitLossInPips());
                    max_buy_profit = Math.max(min_buy_profit, o.order.getProfitLossInPips());
                    net_buy_profit += o.order.getProfitLossInPips() * o.order.getAmount();
                    buy_usd_profit += o.order.getProfitLossInUSD();
                    buy_num++;
                    
                    if(o.order.getProfitLossInPips() > 0) {
                        pos_buy_profit += o.order.getProfitLossInPips() * o.order.getAmount();
                    } else {
                        neg_buy_profit += o.order.getProfitLossInPips() * o.order.getAmount();
                    }
                } 
            
                if(o.is_buy == false && o.order.getState() == IOrder.State.FILLED) {
                    sell_profit = Math.max(sell_profit, o.order.getProfitLossInPips());
                    sell_time = Math.max(sell_time, o.order.getFillTime());
                    min_sell_profit = Math.min(min_sell_profit, o.order.getProfitLossInPips());
                    max_sell_profit = Math.max(min_sell_profit, o.order.getProfitLossInPips());
                    net_sell_profit += o.order.getProfitLossInPips() * o.order.getAmount();
                    sell_usd_profit += o.order.getProfitLossInUSD();
                    sell_num++;
                    
                    if(o.order.getProfitLossInPips() > 0) {
                        pos_sell_profit += o.order.getProfitLossInPips() * o.order.getAmount();
                    } else {
                        neg_sell_profit += o.order.getProfitLossInPips() * o.order.getAmount();
                    }
                }
            }
            
            max_buy_profit = Math.max(max_buy_profit, net_buy_profit);
            max_sell_profit = Math.max(max_sell_profit, net_sell_profit);
            
            boolean is_close_buy = false;
            boolean is_close_sell = false;
            if(buy_num > 20 && (max_buy_profit / net_buy_profit) > (200 / buy_num) && net_buy_profit > 0) {
                //is_close_buy = true;
                max_buy_profit = 0;
            }
            
            if(sell_num > 20 && (max_sell_profit / net_sell_profit) > (200 / sell_num) && net_sell_profit > 0) {
                //is_close_sell = true;
                max_sell_profit = 0;
            }
            
            double ratio = 2;
            boolean is_exposure = orders.size() > 300;
            if(is_exposure == true || account.getUseOfLeverage() > 15) {
                ratio = 1.01;
            }

            if((Math.abs(pos_sell_profit) / Math.max(1, Math.abs(neg_sell_profit))) > ratio && net_sell_profit > (Math.abs(pos_sell_profit) + Math.abs(neg_sell_profit)) * 0.01) {
                is_close_sell = true;
            }
            
            if((Math.abs(pos_buy_profit) / Math.max(1, Math.abs(neg_buy_profit))) > ratio && net_buy_profit > (Math.abs(pos_buy_profit) + Math.abs(neg_buy_profit)) * 0.01) {
                is_close_buy = true;
            }
            
            double factor = 1;
            if(is_max_loss == false && account.getUseOfLeverage() > 5) {
                //factor = Math.sqrt(Math.max(1, account.getUseOfLeverage()));
            }
            
            if(buy_usd_profit < 40 * factor) { 
                is_close_buy = false;
            }
        
            if(sell_usd_profit < 40 * factor) {
                is_close_sell = false;
            }
            

            for(OrderSet o : order_buff) {
                
                if(o.order.getState() != IOrder.State.FILLED) {
                    CloseOrder(o);
                    orders.remove(o);
                    global_orders.remove(o);
                    order_queue.remove(o);
                    continue;
                }
                
                
                if(is_close_buy == true) {
                    CloseOrder(o);
                }
                
                if(is_close_sell == true) {
                    CloseOrder(o);
                }
                
                if(Math.abs(tick.getTime() - o.order.getFillTime()) > 1000 * 60 * 60 * 24) {
                    //CloseOrder(o);
                }
            }
            

            if(dir > 0) {
                volume_diff = Math.max(Math.abs(neg_buy_profit), Math.abs(pos_buy_profit)) / Math.max(1, Math.min(Math.abs(neg_buy_profit), Math.abs(pos_buy_profit)));
            }
            
            if(dir < 0) {
                volume_diff = Math.max(Math.abs(neg_sell_profit), Math.abs(pos_sell_profit)) / Math.max(1, Math.min(Math.abs(neg_sell_profit), Math.abs(pos_sell_profit)));
            }
            
            return true;
        }
        
        // This finds the high low ratio for volatility
        private double HighLowRatio(double pip_val, Instrument instrument) throws JFException {

            double min = Double.MAX_VALUE;
            double max = -Double.MAX_VALUE;
            ArrayList<Double> buff = new ArrayList<Double>();
            for(int i=0; i<4; i++) {
                IBar prev_bar = history.getBar(instrument,
                        Period.DAILY,
                        OfferSide.BID,
                        i);
                
                buff.add(prev_bar.getClose());
                max = Math.max(max, prev_bar.getHigh());
                max = Math.max(max, pip_val);
                
                min = Math.min(min, prev_bar.getLow());
                min = Math.min(min, pip_val);
            }
            
            double mid = (min + max) / 2;
            double gap = Math.abs(max - min) / 2;
            
            if(pip_val > mid) {
                return (Math.abs(pip_val - mid) / gap) * 100;
            } 
            
            return -(Math.abs(pip_val - mid) / gap) * 100;
        }
        
        // This finds the trade direction
        private int TradeDirection(double pip_val, Instrument instrument) throws JFException {
            
            int up_num = 0;
            int down_num = 0;
            for(int i=0; i<60; i++) {
                IBar prev_bar = history.getBar(instrument,
                        Period.DAILY,
                        OfferSide.BID,
                        i);
                
                if(pip_val > prev_bar.getClose()) {
                    up_num++;
                } else {
                    down_num++;
                }

            }
            
            double dmi5[] = indicators.dmi(instrument,
                    Period.DAILY,
                    OfferSide.BID,
                    14,
                    0);

            double dmi1[] = indicators.dmi(instrument,
                    Period.ONE_HOUR,
                    OfferSide.BID,
                    14,
                    0);
            
            double dmi2[] = indicators.dmi(instrument,
                    Period.FOUR_HOURS,
                    OfferSide.BID,
                    14,
                    0);

            double ratio1 = Math.max(Math.abs(dmi1[1]), Math.abs(dmi1[2])) / Math.min(Math.abs(dmi1[1]), Math.abs(dmi1[2]));
            double ratio2 = Math.max(Math.abs(dmi2[1]), Math.abs(dmi2[2])) / Math.min(Math.abs(dmi2[1]), Math.abs(dmi2[2]));
            double ratio5 = Math.max(Math.abs(dmi5[1]), Math.abs(dmi5[2])) / Math.min(Math.abs(dmi5[1]), Math.abs(dmi5[2]));
            
            int dir = 0;
            double max_ratio = Math.max(Math.max(ratio1, ratio2), ratio5);
            
            if(ratio1 == max_ratio) {
                // with the trend
                dir = (Math.abs(dmi1[1]) < Math.abs(dmi1[2])) ? 1 : -1;
            } else if(ratio2 == max_ratio) {
                // with the trend
                dir = (Math.abs(dmi2[1]) < Math.abs(dmi2[2])) ? 1 : -1;
            } else {
                // with the trend
                dir = (Math.abs(dmi5[1]) < Math.abs(dmi5[2])) ? 1 : -1;
            }
            
            return dir;
        }


        // This initiates the position
        private void InitPosition(ITick tick, Instrument instrument, boolean is_max_loss) throws JFException {
            

            CloseOrderType(trade_dir, tick, 10, is_max_loss);
            
            double pip_val = (tick.getAsk() + tick.getBid()) / 2;
            double spread = Math.abs(tick.getBid() - tick.getAsk()) / instrument.getPipValue();
            
            double pos_num = 0;
            double neg_num = 0;
            double net_pos_gap = 0;
            double net_neg_gap = 0;
            
            double net_gap = 0;
            double min_profit = 0;
            double max_profit = -Double.MAX_VALUE;
            double net_profit = 0;
            double net_vol = 0;
            double avg_time = 0;
            
            for(OrderSet o : global_orders) {
                net_vol += o.order.getAmount();
            }
            
            ArrayList<OrderSet> order_buff = new ArrayList<OrderSet>();
            for(OrderSet o : orders) {
                order_buff.add(o);
            }
            
            for(int i=0; i<order_buff.size(); i++) {
                
                OrderSet o = order_buff.get(i);
                if(o.order.getProfitLossInPips() < min_profit) {
                    min_profit = o.order.getProfitLossInPips();
                }

                avg_time += Math.abs(o.order.getFillTime() - first_trade_time);
                max_profit = Math.max(max_profit, o.order.getProfitLossInPips());
                net_profit += o.order.getAmount() * (o.order.getProfitLossInPips() - spread);
                double perc = o.order.getAmount() / net_vol;
                
                if(o.order.getProfitLossInPips() < 0 && Math.abs(o.order.getProfitLossInPips()) < 75) {
                     net_neg_gap += Math.abs(o.order.getProfitLossInPips());
                     neg_num++;
                }
                
                if(o.order.getProfitLossInPips() > 0) {
                     net_pos_gap += Math.abs(o.order.getProfitLossInPips());
                     pos_num++;
                }
            }
            
            if(orders.size() > 0) {
                avg_time /= orders.size();
            }
            
            if(net_neg_gap > 0) {
                net_neg_gap /= neg_num;
            }

            if(net_pos_gap > 0) {
                net_pos_gap /= pos_num;
            }
            
            net_gap = net_neg_gap;

            double dmi1[] = indicators.dmi(instrument,
                    Period.TEN_SECS,
                    OfferSide.BID,
                    14,
                    0);
            
            double dmi2[] = indicators.dmi(instrument,
                    Period.ONE_HOUR,
                    OfferSide.BID,
                    28,
                    0);
            
            double rsi = indicators.rsi(instrument,
                       Period.ONE_HOUR,
                       OfferSide.BID,
                       IIndicators.AppliedPrice.CLOSE,
                       14,
                       0);
            
            int dir = (Math.abs(dmi1[1]) > Math.abs(dmi1[2])) ? 1 : -1;
            int dir1 = (Math.abs(dmi2[1]) > Math.abs(dmi2[2])) ? 1 : -1;
            double ratio = Math.max(Math.abs(dmi1[1]),  Math.abs(dmi1[2])) / Math.min(Math.abs(dmi1[1]),  Math.abs(dmi1[2]));
            double ratio1 = Math.max(Math.abs(dmi2[1]),  Math.abs(dmi2[2])) / Math.min(Math.abs(dmi2[1]),  Math.abs(dmi2[2]));
            double var = indicators.var(instrument, Period.ONE_HOUR, OfferSide.BID, IIndicators.AppliedPrice.CLOSE, 28, 2, 0);


            if(active_order_num == 0) {
                order_place_set.clear();
                first_trade_time = tick.getTime();
                
                if(account.getUseOfLeverage() > 5 || global_orders.size() > 300) {
                    return;
                }
                
                Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
                cal.setTimeInMillis(tick.getTime());
                int hour = cal.get(Calendar.HOUR_OF_DAY);
                int day = cal.get(Calendar.DAY_OF_WEEK);
                
                if(hour > 22 && day >= 6) {
                    return;
                }
                
                if(trade_dir < 0 && rsi < 40) {
                    //return;
                }
                
                if(trade_dir > 0 && rsi  > 60) {
                    //return;
                }
            }

            if(orders.size() > 0 && Math.abs(pip_val - prev_pip_val) < instrument.getPipValue() * 0.05 * Math.abs(min_profit)) {
                //return;
            }
            
            double diff2 = 1;
            
            if(order_queue.size() > 0) {
                diff2 = Math.abs(pip_val - order_queue.peek().order.getOpenPrice()) / instrument.getPipValue();
                diff2 = Math.min(diff2, 200);
                if(is_max_loss == false) {
                    diff2 = Math.min(diff2, 50);
                }

                //diff2 /= Math.abs(min_profit);
            }
            
            System.out.println(account.getEquity()+"       "+global_orders.size()+"     "+account.getUseOfLeverage()+"  "+diff2+"   "+Math.abs(net_gap));
    
            double vol_size = (account.getEquity() / 100000) * exch_rate_fact;
            Integer price = (int) ((pip_val * 1) / instrument.getPipValue());
            String val = String.valueOf(price);// + " " + String.valueOf((int)(account.getUseOfLeverage() * 2));
            PricePoint last_order = order_place_set.get(val);
            if(last_order != null && last_order.order_num > 0 && 
                    Math.abs(tick.getTime() - last_order.order.order.getFillTime()) < 1000 * 60 * 60 * 1) {
                return;
            }
            
            if(max_profit > 5 && net_profit > 0 && Math.abs(max_profit) * 2 > Math.abs(min_profit)) {
                for(OrderSet o1 : order_buff) {
                    CloseOrder(o1);
                }
                return;
            }
            

            OrderSet o = new OrderSet();
            o.is_buy = trade_dir > 0;
            o.price = pip_val;
            o.volume = 0.000000001 * vol_size;
            o.volume *= Math.abs(avg_time) * 10e-8;

            if(dir == trade_dir) {
                o.volume *= Math.abs(net_gap);
                o.volume *= Math.abs(net_gap);
                o.volume *= Math.abs(net_gap);
                o.volume *= orders.size();
            } else {
                return;
            }
            
            if(last_order != null) {
                last_order.order_num++;
                last_order.order = o;
            } else {
                last_order = new PricePoint(o, 1);
            }
            
            order_place_set.put(val, last_order);
            
            
            /*if(account.getUseOfLeverage() > 180) {
                curr_equity = account.getEquity();
                for(OrderSet o1 : order_buff) {
                    CloseOrder(o1);
                }
                return;
            }*/
            
            PlaceOrder(o, o.volume, instrument, tick);
            tick.getTime();
            prev_pip_val = pip_val;
            orders.add(o);
        }
        
        // This returns the net loss
        public double NetLoss() {
            
            double net_profit = 0;
            for(OrderSet o : orders) {
                net_profit += o.order.getProfitLossInAccountCurrency();
            }
            
            return net_profit;
        }
        
        // This returns the total profit since trading
        public double TotalProfit() {
            return total_profit;
        }
       
        // This processes the current tick
        public void ProcessTick(ITick tick, Instrument instrument, boolean is_max_loss) throws JFException {
            
            ExchRateFactor();
            InitPosition(tick, instrument, is_max_loss);
        }
   }
   
   // This stores the set of instruments 
   private HashMap<String, OrderSystem> sys_map = new HashMap<String, OrderSystem>();
   // This stores the set of instruments
   private ArrayList<OrderSystem> inst_buff = new ArrayList<OrderSystem>();
   // This stores the set of global orders
   private static HashSet<OrderSet> global_orders = new HashSet<OrderSet>();
   // This stores the account equity
   private ArrayList<Double> equity_buff = new ArrayList<Double>();
   // This stores the previous order refresh time
   private long prev_refresh_time = 0;

   public HFTStrategy() throws IOException, ParseException, JFException {

   }
   
   public void onStart(final IContext context) throws JFException {
       
       this.engine = context.getEngine();
       this.console = context.getConsole();
       this.history = context.getHistory();
       this.context = context;
       this.indicators = context.getIndicators();
       this.userInterface = context.getUserInterface();
       this.con = context.getConsole();
       this.account = context.getAccount();
       
       curr_equity = account.getEquity();
       
       // NOT USDNZD
       //Instrument inst[] = new Instrument[]{Instrument.USDCHF, Instrument.NZDUSD, Instrument.AUDCHF};
       Instrument inst[] = new Instrument[]{Instrument.USDPLN, Instrument.USDTRY};
       

       //subscribe an instrument:
       Set<Instrument> instruments = new HashSet<Instrument>();
       
       int count = 0;
       for(int i=0; i<inst.length; i++) {
           instruments.add(inst[i]);    
           OrderSystem o = new OrderSystem(count, inst[i], 1);
           inst_buff.add(o);  
           count++;
           
           String str = inst[i]+" 1";
           sys_map.put(str, o);

           str = inst[i]+" 0";
           o = new OrderSystem(count, inst[i], -1);
           inst_buff.add(o);  
           sys_map.put(str, o);
           count++;
       }  
       
                  
       context.setSubscribedInstruments(instruments, true);  

   }

   public void onAccount(IAccount account) throws JFException {
   }

   public void onMessage(IMessage message) throws JFException {
   }

   public void onStop() throws JFException {
       console.getOut().println("Stopped "+account.getEquity());
       
       PrintWriter pw = null;
       try {
           pw = new PrintWriter(new File("test.txt"));
           for(int i=0; i<equity_buff.size(); i++) {
               
               pw.println(equity_buff.get(i));
           }
           pw.close();
           
       } catch (FileNotFoundException e) {
           // TODO Auto-generated catch block
           e.printStackTrace();
       }
   }
   

   public void onTick(Instrument instrument, ITick tick) throws JFException {
 
       
       curr_equity = Math.max(curr_equity, account.getEquity());
       
       for(int i=0; i<2; i++) {
           OrderSystem o = sys_map.get(instrument+" "+i);
           if(o == null) {
               continue;
           }
           
           if(Math.abs(tick.getTime() - prev_refresh_time) > 1000000) {
               prev_refresh_time = tick.getTime();
               HashSet<IOrder> map = new HashSet<IOrder>();
               for(OrderSet o1 : global_orders) {
                      map.add(o1.order);
               }
                   
               for(IOrder o1 : engine.getOrders()) {
                      if(map.contains(o1) == false) {
                          o1.close();
                      } 
               }
           }
           
           if(Math.abs(prev_equity_time - tick.getTime()) > 1000 * 60 * 60 * 24) {
               equity_buff.add(account.getEquity());
               prev_equity_time = tick.getTime();
           }
          
           OrderSystem max_o = null;
           double max_loss = 0;
           for(OrderSystem o1 : inst_buff) {
               double loss = Math.abs(o1.NetLoss());
               if(loss > max_loss) {
                   max_loss = loss;
                   max_o = o1;
               }
           }
           
           for(OrderSystem o1 : inst_buff) {
               //System.out.print(o1.TotalProfit()+" ");
           }
           
           //System.out.println("");
          
           o.ProcessTick(tick, instrument, o == max_o);
       }
       
   }
   
   public void onBar(Instrument instrument, Period period, IBar askBar, IBar bidBar) throws JFException {
   }
}